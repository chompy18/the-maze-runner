---
- name: "Provision EC2 Instance"
  local_action:
   module: ec2
   key_name: "{{ ec2_keypair }}"
   group_id: "{{ ec2_security_group }}"
   instance_type: "{{ ec2_instance_type }}"
   image: "{{ ec2_image }}"
   vpc_subnet_id: "{{ ec2_subnet_ids|random }}"
   region: "{{ ec2_region }}"
   zone: "{{ ec2_zone }}"
   instance_tags: '{"Name":"{{ ec2_tag_Name }}","Type":"{{ ec2_tag_Type }}","Environment":"{{ ec2_tag_Environment }}","Launched_by_vendor":"{{ ec2_Vendor_Name }}"}'
   assign_public_ip: yes
   wait: true
   count_tag: '{"Name":"{{ ec2_tag_Name }}","Type":"{{ ec2_tag_Type }}","Environment":"{{ ec2_tag_Environment }}"}'
   exact_count: "{{ num_of_instances }}"
   volumes:
   - device_name: /dev/sda1
     device_type: gp2
     volume_size: "{{ ec2_volume_size }}"
     delete_on_termination: true
  register: ec2

- debug: var=item
  with_items: "{{ ec2.instances }}"

- add_host:
    name: "{{ item.private_ip }}"
    groups: "tag_Type_{{ ec2_tag_Type }},tag_Environment_{{ ec2_tag_Environment }}"
    ec2_region: "{{ ec2_region }}"
    ec2_tag_Name: "{{ ec2_tag_Name }}"
    ec2_tag_Type: "{{ ec2_tag_Type }}"
    ec2_tag_Environment: "{{ ec2_tag_Environment }}"
    ec2_ip_address: "{{ item.private_ip }}"
  with_items: "{{ ec2.instances }}"

- name: Wait for the instances to boot by checking the ssh port checking every {{ delay.time }} with timeout {{ delay.timeout }}
  wait_for: host={{item.public_ip}} port=22 delay={{ delay.time }} timeout={{ delay.timeout}} state=started
  with_items: "{{ec2.instances}}"
